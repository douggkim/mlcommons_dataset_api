openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/dougieduk/Dataset_service/1.0.0
info:
  version: "1.0.0"
  title: Dataset Service APIs
  description: >-
    APIs used to read, manipulate, and version the open datasets distributed
    by MLCommons. 
security:
  - application:
      - read
      - write
      - delete
paths:
### Repository-related ### 
  /repositories:
    get:
      summary: >- 
        Get the list of directories
      description: >-
        List all the directories maintained by MLCommons<br>
      responses:
        '200':
          description: return repository metadata
        '401': 
          description: Unauthorized User
        '404': 
          description: repository not found 
        '420': 
          description: too many requests. 
    
  /repositories/{repository_name}:
    get:
      summary: >- 
        Get the list of files or directories for that directory
      description: >-
        Lists the files in the directory or the repository<br>
        Discussion<br> 
        1. Should the user be able to list the whole directory from root? (could take a long time due to large number of folders)<br>
      parameters: [
        {
          name: "repository_name", 
          in: "path",
          description: "the repository to query",
          required: true,
          schema: {
            type: "string"
          }
        }
        ]
      responses:
        '200':
          description: OK
        '400': 
          description: No such repository or directory
    ## Check what to put in the body content
    # post:
    #   summary: >- 
    #     Create a new repository based on 
    #   description: >-
    #     Lists the files in the directory or the repository<br>
    #     Discussion<br> 
    #     1. Should the user be able to list the whole directory from root? (could take a long time due to large number of folders)<br>
    #     2. How 
    #   requestBody:
    #     content:
    #       application/json:
    #         schema:
    #           $ref: '#/components/schemas/Order'
    #       application/xml:
    #         schema:
    #           $ref: '#/components/schemas/Order'
    #       application/x-www-form-urlencoded:
    #         schema:
    #           $ref: '#/components/schemas/Order'
    #   responses:
    #     '200':
    #       description: OK
    #     '400': 
    #       description: No such repository or directory
    delete: 
      summary: >- 
        Delete the repository. 
      description: >-
        Delete the repository. Must be only available to the authorized users. 
      parameters: [
        {
          name: "repository_name", 
          in: "path",
          description: "the repository to delete",
          required: true,
          schema: {
            type: "string"
          }
        }
        ]
      responses: 
        '200':
          description: Requested Repository deleted. 
        '400':
          description: No such repository. 
          
  /repositories/{repository_name}/metadata:
    get:
      summary: >- 
        Get the metadata of the repository
      description: >-
        Get metadata about the dataset referring to the croissant file <br>
      parameters: [
        {
          name: "repository_name", 
          in: "path",
          description: "the repository to query",
          required: true,
          schema: {
            type: "string"
          }
        }
        ]
      responses:
        '200':
          description: OK
        '401': 
          description: Unauthorized User
### Branch level operation ### 
  /repositories/{repository_name}/branches:
    get:
      summary: >- 
        Get the list of branches for that repository
      description: >-
        Lists the branches for the specified repository<br>
      parameters: [
        {
          name: "repository_name", 
          in: "path",
          description: "the repository to query",
          required: true,
          schema: {
            type: "string"
          }
        }
        ]
      responses:
        '200':
          description: OK
        '400': 
          description: No such repository or directory
    post: 
      summary: >-
        Create a new branch 
      description: >-
        Create a new branch for the specified repository. Source branch should be specified.
      parameters: [
        {
          name: "repository_name", 
          in: "path",
          description: "the repository to query",
          required: true,
          schema: {
            type: "string"
          }
        }
        ]
      requestBody: 
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: 'branch_name_new'
                source:
                  type: string
                  example: 'parent_branch_name'
      responses:
        '200':
          description: OK
        '400': 
          description: No such repository or directory
  /repositories/{repository_name}/branches/{branch_name}:
    get:
      summary: >- 
        get branch
      description: >-
        get the current commit id for the branch<br>
      parameters: [
        {
          name: "repository_name", 
          in: "path",
          description: "the repository to query",
          required: true,
          schema: {
            type: "string"
          }
        },
        {
          name: "branch_name", 
          in: "path",
          description: "the target branch to query",
          required: true,
          schema: {
            type: "string"
          }
        }
        ]
      responses:
        '200':
          description: OK
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  id:
                    type: string 
                  commit_id: 
                    type: string
        '400': 
          description: No such repository or directory
    delete: 
      summary: >- 
        Delete the specified branch. 
      description: >-
        Delete the specified branch. Must be only available to the authorized users. 
      parameters: [
        {
          name: "repository_name", 
          in: "path",
          description: "the target repository to delete the branch in",
          required: true,
          schema: {
            type: "string"
          }
        },
        {
          name: "branch_name", 
          in: "path",
          description: "the target branch to delete",
          required: true,
          schema: {
            type: "string"
          }
        }
        ]
      responses: 
        '200':
          description: Requested branch deleted. 
        '400':
          description: No such branch. 
  /repositories/{repository_name}/branches/{branch_name}/revert:
    post: 
      summary: >-
        Revert the branch to a certain commit
      description: >-
        Revert the branch to a certain commit or the parent commit
      parameters: [
        {
          name: "repository_name", 
          in: "path",
          description: "the repository where the target branch is in",
          required: true,
          schema: {
            type: "string"
          }
        },
        {
          name: "branch_name", 
          in: "path",
          description: "the target branch to revert",
          required: true,
          schema: {
            type: "string"
          }
        }
        ]
      requestBody: 
        content:
          application/json:
            schema:
              type: object
              properties:
                ref:
                  type: string
                  description: the commit_id, branch, and tag to revert to. If ommitted, the branch will be reverted to the most recent commit. 
                  example: 'branch_name_new'
      responses:
        '200':
          description: OK
        '400': 
          description: No such repository or directory
### Tags ### 
  /repositories/{repository_name}/tags:
    get: 
      description: >-
        Get the list of tags for the repository
      parameters: [
        {
          name: "repository_name",
          in: "path",
          description: "the repository to query the tags for",
          required: true, 
          schema: {
            type: "string"
          }
        },
        {
          name: "prefix",
          in: "query",
          description: "the prefix to filter the tags on",
          required: False, 
          schema: {
            type: "string"
          }
        },
        {
          name: "limit",
          in: "query",
          description: "the number of results to return",
          required: False,
          schema: {
            type: "integer"
          }
        }
        ]
      responses: 
        '200': 
          description: OK
        '400': 
          description: No such repository
    post:
      description: >-
        Create tag for the provided repository
      parameters: [
        {
          name: "repository_name",
          in: "path",
          description: "the repository to query the tags for",
          required: true, 
          schema: {
            type: "string"
          }
        }
        ]
      requestBody: 
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: 'example_commit_id'
                ref:
                  type: string
                  example: "example_tag_name"
      responses: 
        '200': 
          description: OK
        '400': 
          description: No such repository
  /repositories/{repository_name}/tags/{tag_name}:
    get: 
      description: >-
        Get the content of the tag
      parameters: [
        {
          name: "repository_name",
          in: "path",
          description: "the repository to query the tags for",
          required: true, 
          schema: {
            type: "string"
          }
        },
        {
          name: "tag_name",
          in: "path",
          description: "the tag to query the content for",
          required: true, 
          schema: {
            type: "string"
          }
        }
        ]
      responses: 
        '200':
          description: OK
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  id:
                    type: string 
                  commit_id: 
                    type: string
        '400': 
          description: No such repository
    delete: 
      description: >-
        delete tag 
      parameters: [
        {
          name: "repository_name",
          in: "path",
          description: "the repository to query the tags for",
          required: true, 
          schema: {
            type: "string"
          }
        },
        {
          name: "tag_name",
          in: "path",
          description: "the tag to query the content for",
          required: true, 
          schema: {
            type: "string"
          }
        }
        ]
      responses: 
        '200':
          description: Tag deleted successfully
        '400': 
          description: No such repository
### Commits ### 
  /repositories/{repository_name}/{branch_name}/commits:
    get:
      summary: >- 
        Get the list of commits for the repository
      description: >-
        Get the list of the commit ids and their dates (deletion & addition of files) 
      parameters: [
        {
          name: "repository_name", 
          in: "path",
          description: "the repository to query the commits for",
          required: true,
          schema: {
            type: "string"
          }
        },
        {
          name: "branch_name", 
          in: "path",
          description: "the target branch to query the commits for",
          required: true,
          schema: {
            type: "string"
          }
        }
        ]
      responses:
        '200':
          description: OK
        '400': 
          description: No such repository or directory
    post:
      summary: >- 
        Create a comit based on the current status of the repo metadata
      description: >-
        Get the list of the commit ids and their dates (deletion & addition of files) 
      parameters: [
        {
          name: "repository_name", 
          in: "path",
          description: "the repository to query the commits for",
          required: true,
          schema: {
            type: "string"
          }
        },
        {
          name: "branch_name", 
          in: "path",
          description: "the target branch to commit",
          required: true,
          schema: {
            type: "string"
          }
        }
        ]
      requestBody: 
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: 'this is the commit message'
                metadata:
                  type: object
                  example: 
                    {
                      "additional_prop_1": "string",
                      "additional_prop_2": "string",
                      "additional_prop_3": "string"
                    }
                commit_date:
                  type: string
                  format: date-time
                  example: '1995-09-07T10:40:52Z'
              
      responses:
        '200':
          description: OK
        '400': 
          description: No such repository or directory
  /repositories/{repository_name}/{branch_name}/commits/{commit_id}:
    get:
      summary: >- 
        Get the content of a commit for the given commit_id
      description: >-
        Get the list of changes for  the commit ids (deletion & addition of files) 
      parameters: [
        {
          name: "repository_name", 
          in: "path",
          description: "the repository to query the commit for",
          required: true,
          schema: {
            type: "string"
          }
        },
        {
          name: "branch_name", 
          in: "path",
          description: "the target branch to query",
          required: true,
          schema: {
            type: "string"
          }
        },
        {
          name: "commit_id", 
          in: "path",
          description: "the commit id to query the history for",
          required: true,
          schema: {
            type: "string"
          }
        }
        ]
      responses:
        '200':
          description: OK
        '400': 
          description: No such repository or directory
          
  /repositories/{repository_name}/refs/{source_ref}/diff/{target_ref}:
    get:
      summary: >- 
        Get the diff of two branches or commits
      description: >-
        Get the diff of two branches or commits. source_ref and target_ref should be
        branch name or commit id. 
      parameters: [
        {
          name: "repository_name", 
          in: "path",
          description: "the repository to query the commit for",
          required: true,
          schema: {
            type: "string"
          }
        },
        {
          name: "source_ref", 
          in: "path",
          description: "the source commit id or branch to compare with",
          required: true,
          schema: {
            type: "string"
          }
        },
        {
          name: "target_ref", 
          in: "path",
          description: "the commit id or branch to compare with the source ref",
          required: true,
          schema: {
            type: "string"
          }
        }
        ]
      responses:
        '200':
          description: OK
        '400': 
          description: No such repository or directory  
  /repositories/{repository_name}/refs/{source_ref}/merge/{target_ref}:
    post:
      summary: >- 
        Merge the diff of two branches or commits
      description: >-
        Merge two branches or commits. source_ref and target_ref should be
        branch name or commit id. 
      parameters: [
        {
          name: "repository_name", 
          in: "path",
          description: "the repository to query the commit for",
          required: true,
          schema: {
            type: "string"
          }
        },
        {
          name: "source_ref", 
          in: "path",
          description: "the source commit id or branch to merge",
          required: true,
          schema: {
            type: "string"
          }
        },
        {
          name: "target_ref", 
          in: "path",
          description: "the commit id or branch to merge",
          required: true,
          schema: {
            type: "string"
          }
        }
        ]
      responses:
        '200':
          description: OK
        '400': 
          description: No such repository or directory  
### Directory level operation ### 
  /repositories/{repository_name}/{branch_name}/{directory_name}:
    get:
      summary: >- 
        Get the list of files or directories for that branch
      description: >-
        Lists the files in the directory of the repository & branch<br>
        Discussion<br> 
        1. Should the user be able to list the whole directory from root? (could take a long time due to large number of folders)<br>
      parameters: [
        {
          name: "repository_name", 
          in: "path",
          description: "the repository to query",
          required: true,
          schema: {
            type: "string"
          }
        },
        {
          name: "branch_name", 
          in: "path",
          description: "the target branch to query",
          required: true,
          schema: {
            type: "string"
          }
        },
        {
          name: "directory_name", 
          in: "path",
          description: "the directory to query. Queries all the directories in the repository if not provided",
          required: True,
          schema: {
            type: "string"
          }
        }
        ]
      responses:
        '200':
          description: OK
        '400': 
          description: No such repository or directory
    delete: 
      summary: >- 
        Delete the mentioned directory. 
      description: >-
        Delete the directory. Must be only available to the authorized users. 
      parameters: [
        {
          name: "repository_name", 
          in: "path",
          description: "the target repository to delete the directory in",
          required: true,
          schema: {
            type: "string"
          }
        },
        {
          name: "branch_name", 
          in: "path",
          description: "the target branch to query",
          required: true,
          schema: {
            type: "string"
          }
        },
        {
          name: "directory_name", 
          in: "path",
          description: "the directory to delete",
          required: True,
          schema: {
            type: "string"
          }
        }
        ]
      responses: 
        '200':
          description: Requested directory deleted. 
        '400':
          description: No such director. 
  ### File-related ###
  /repositories/{repository_name}/refs/{ref_name}/objects:
    get:
      summary: >- 
        Get Object content
      description: >-
        Retrieve the content of the specified path as response
      parameters: [
        {
          name: "path", 
          in: "query",
          description: "the path of the file to query",
          required: true,
          schema: {
            type: "string"
          }
        },
        {
          name: "ref_name", 
          in: "path",
          description: "the target branch or tag to query",
          required: true,
          schema: {
            type: "string"
          }
        },
        {
          name: "repository_name", 
          in: "path",
          description: "the target repository to query",
          required: True,
          schema: {
            type: "string"
          }
        }
        ]
      responses:
        '200':
          description: Object Content
          content: 
            application/octet-stream: 
              schema:
                type: object 
        '400': 
          description: No such repository or directory
    post:
      summary: >- 
        Upload Object content
      description: >-
        Upload the file to the local repository. Requires Commit to upload it to the remote API. 
      parameters: [
        {
          name: "path", 
          in: "query",
          description: "the path of the file to upload",
          required: true,
          schema: {
            type: "string"
          }
        },
        {
          name: "ref_name", 
          in: "path",
          description: "the target branch, or tag to upload to",
          required: true,
          schema: {
            type: "string"
          }
        },
        {
          name: "repository_name", 
          in: "path",
          description: "the repository to upload to",
          required: True,
          schema: {
            type: "string"
          }
        }
        ]
      responses:
        '200':
          description: Object metadata
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  path:
                    type: string 
                  path_type: 
                    type: string
                  physical_address:
                    type: string 
                  size_bytes: 
                    type: integer
                  metadata: 
                    type: object
        '400': 
          description: validation error
          content:
            application/json: 
              schema: 
                type: object
                properties: 
                  message: 
                    type: string
        '401': 
          description: unauthorized
        '403': 
          description: forbidden
        '404': 
          description: resource not found 
    delete:
      summary: >- 
        Delete Object.
      description: >-
        Delete object from the local repository. Requires Commit to apply it to the remote 
        server. Missing objects will return a NotFound error. 
      parameters: [
        {
          name: "path", 
          in: "query",
          description: "the path of the file to delete",
          required: true,
          schema: {
            type: "string"
          }
        },
        {
          name: "repository_name", 
          in: "path",
          description: "the repository to delete from",
          required: True,
          schema: {
            type: "string"
          }
        },
        {
          name: "ref_name", 
          in: "path",
          description: "the target branch, or tag to delete from",
          required: true,
          schema: {
            type: "string"
          }
        }
        ]
      responses:
        '204':
          description: Object deleted successfully
        '401': 
          description: unauthorized
        '403': 
          description: forbidden
        '404': 
          description: resource not found
        '420': 
          description: Too many requests
          
  ## meta_data commented out as the metadata should be queried using the croissant files by the users
  # /repositories/{repository_name}/{branch_name}/objects/meta_data:
  #   get: 
  #     summary: get the object metadata
  #     description: get the object metadata for the specified path
  #     parameters: [
  #       {
  #         name: "path", 
  #         in: "query",
  #         description: "the path of the file to upload",
  #         required: true,
  #         schema: {
  #           type: "string"
  #         }
  #       },
  #       {
  #         name: "repository_name", 
  #         in: "path",
  #         description: "the repository to query",
  #         required: True,
  #         schema: {
  #           type: "string"
  #         }
  #       },
  #       {
  #         name: "branch_name", 
  #         in: "path",
  #         description: "the target branch to uplaod to",
  #         required: true,
  #         schema: {
  #           type: "string"
  #         }
  #       }
  #     ]
  #     responses: 
  #       '200':
  #         description: Object metadata
  #         content: 
  #           application/json: 
  #             schema:
  #               type: object
  #               properties:
  #                 path:
  #                   type: string 
  #                 path_type: 
  #                   type: string
  #                 physical_address:
  #                   type: string 
  #                 size_bytes: 
  #                   type: integer
  #                 metadata: 
  #                   type: object
  #       '400':
  #         description: Object metadata
  #       '401':
  #         description: Unauthorized 
  #       '404':
  #         description: Resource Not Found 
  #       '420': 
  #         description: Too many requests
  ### File import-related ###  -> not considering this use case
  # /repositories/{repository_name}/{branch_name}/objects/import:
  #   get: 
  #     summary: import data from the object store 
  #     description: get the progress of the object import job
  #     parameters: [
  #       {
  #         name: "repository_name", 
  #         in: "path",
  #         description: "the repository to import the data to",
  #         required: True,
  #         schema: {
  #           type: "string"
  #         }
  #       },
  #       {
  #         name: "branch_name", 
  #         in: "path",
  #         description: "the target branch to uplaod to",
  #         required: true,
  #         schema: {
  #           type: "string"
  #         }
  #       }
  #     ]
  #     responses: 
  #       '200':
  #         description: Import Status
  #       '401':
  #         description: Unauthorized 
  #       '404': 
  #         description: Resource Not Found 
  #       '420': 
  #         description: Too Many Requests
  
  
  ### Auth ### 
  /auth/users: 
    get: 
      description: >-
        get the list of users 
      parameters: [
        {
          name: "prefix", 
          in: "query",
          description: "the prefix filter to search the users for",
          required: false,
          schema: {
            type: "string"
          }
        },
        {
          name: "amount", 
          in: "query",
          description: "the amount of results the API should return",
          required: false,
          schema: {
            type: "integer"
          }
        }
        ]
      responses:
        '200':
          description: List of users 
        '401':
          description: unauthorized
    post: 
      description: >- 
        create a new user. 
      requestBody: 
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: "unique key for user"
                  example: '100'
                sso_id:
                  type: string
                  example: 'dougieduk@githbub.com'
      responses: 
        200: 
          description: OK 
  /auth/users/{user_id}: 
    get: 
      description: >-
        get the user information (sso_id, join_date)
      parameters: [
        {
          name: "user_id", 
          in: "path",
          description: "the user_id to retrieve the information for",
          required: true,
          schema: {
            type: "string"
          }
        }
        ]
      responses:
        '200':
          description: user information
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  user_id:
                    type: string 
                  creation_date: 
                    type: string
                  sso_id: 
                    type: string 
        
        '401':
          description: unauthorized
    delete: 
      description: >- 
        delete the user. 
      parameters: [
        {
          name: "user_id", 
          in: "path",
          description: "the user_id to delete",
          required: true,
          schema: {
            type: "string"
          }
        }
        ]
      responses: 
        200: 
          description: User deleted
  ### Others ### 
  /healthcheck:
    get:
      summary: check that the API server is up and running
      description: >-
        Heartbeat API to check that the API server is alive 
      security: []
      responses:
        '204':
          description: the server is alive with no response content. 
  ### User-related ###
          
components:
  ## Have to define the metadata for repositories
  ### Example Schemas ### 
  # schemas:
  # Order:
  #   type: object
  #   properties:
  #     id:
  #       type: integer
  #       format: int64
  #       example: 10
  #     petId:
  #       type: integer
  #       format: int64
  #       example: 198772
  #     quantity:
  #       type: integer
  #       format: int32
  #       example: 7
  #     shipDate:
  #       type: string
  #       format: date-time
  #     status:
  #       type: string
  #       description: Order Status
  #       example: approved
  #       enum:
  #         - placed
  #         - approved
  #         - delivered
  #     complete:
  #       type: boolean
  #   xml:
  #     name: order
  securitySchemes:
    application:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: 'http://example.com/oauth/token'
          scopes:
            write: allows modifying resources
            read: allows reading resources