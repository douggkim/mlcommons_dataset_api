openapi: 3.0.0
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/dougieduk/Dataset_service/1.0.0

info:
  version: "1.0.0"
  title: Dataset Service APIs
  description: >-
    APIs used to read, manipulate, and version the open datasets distributed
    by MLCommons. 

security:
  - application:
      - read
      - write
      - delete

paths:
### Repository-related ### 
  /repositories:
    get:
      summary: >- 
        Get the list of repositories
      description: >-
        List all the repositories
      parameters: [
        {
          name: "prefix", 
          in: "query",
          description: "return items prefixed with this value",
          required: False,
          schema: {
            type: "string"
          }
        },
        {
          name: "after", 
          in: "query",
          description: "return items after this value - used for pagination",
          required: False,
          schema: {
            type: "string"
          }
        },
        {
          name: "amount", 
          in: "query",
          description: "number of items to return",
          required: False,
          schema: {
            type: "string",
            default: 100
          }
        }
        ]
      responses:
        '200':
          description: return list of repositories
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  pagination:
                    type: object
                    properties: 
                      has_more:
                        type: boolean
                      next_offset: 
                        type: string
                      results: 
                        type: integer
                      max_per_page: 
                        type: integer
                  results: 
                    type: array
                    items: 
                      type: object
                      properties: 
                        id: 
                          type: string 
                        creation_date: 
                          type: string 
                          format: date-time
                          example: '1995-09-07T10:40:52Z'
                        default_ref: 
                          type: string
        '401': 
          description: Unauthorized User
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404': 
          description: repository not found 
        '420': 
          description: too many requests. 
        'default': 
          description: Internal server error
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string

  /repositories/{repository_name}:
    get:
      summary: >- 
        Get the list of files or directories for that repository
      description: >-
        Lists the files in the directory or the repository
      parameters: [
        {
          name: "repository_name", 
          in: "path",
          description: "the repository to query",
          required: true,
          schema: {
            type: "string"
          }
        },
        {
          name: "prefix", 
          in: "query",
          description: "return items prefixed with this value",
          required: False,
          schema: {
            type: "string"
          }
        },
        {
          name: "after", 
          in: "query",
          description: "return items after this value - used for pagination",
          required: False,
          schema: {
            type: "string"
          }
        },
        {
          name: "amount", 
          in: "query",
          description: "number of items to return - used for pagination",
          required: False,
          schema: {
            type: "string",
            default: 100
          }
        }
        ]
      responses:
        '200':
          description: return list of directories under that repository
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  pagination:
                    type: object
                    properties: 
                      has_more:
                        type: boolean
                      next_offset: 
                        type: string
                      results: 
                        type: integer
                      max_per_page: 
                        type: integer
                  results: 
                    type: array
                    items: 
                      type: object
                      properties: 
                        directory_name: 
                          type: string 
                        creation_date: 
                          type: string 
                          format: date-time
                          example: '1995-09-07T10:40:52Z'
        '401': 
          description: Unauthorized User
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404': 
          description: repository not found 
        '420': 
          description: too many requests. 
        'default': 
          description: Internal server error
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string

    delete: 
      summary: >- 
        Delete the repository. 
      description: >-
        Delete the repository. Only available to the authorized users with X-API-KEY. 
      parameters: [
        {
          name: "repository_name", 
          in: "path",
          description: "the repository to delete",
          required: true,
          schema: {
            type: "string"
          }
        },
        {
          name: "X-API-KEY", 
          in: "header",
          description: "API key for admins to delete and create new repositories",
          required: true, 
          schema: {
            type: "string", 
            format: "uuid"
          }
        }
        ]
      responses: 
        '204':
          description: Requested Repository deleted. 
        '401': 
          description: Unauthorized User
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404': 
          description: repository not found 
        '420': 
          description: too many requests. 
        'default': 
          description: Internal server error
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string
                    
  /repositories/{repository_name}/metadata:
    get:
      summary: >- 
        Get the metadata of the repository
      description: >-
        Get metadata about the dataset
      parameters: [
        {
          name: "repository_name", 
          in: "path",
          description: "the repository to query",
          required: true,
          schema: {
            type: "string"
          }
        }
        ]
      responses:
        '200':
          description: repository metadata
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  name:
                    type: string 
                  '@type':
                    type: string
                  description: 
                    type: string
                  license: 
                    type: string 
        '401': 
          description: Unauthorized User
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404': 
          description: repository not found 
        '420': 
          description: too many requests. 
        'default': 
          description: Internal server error
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string
## namespace level operation ###
  /repositories/{repository_name}/namespaces:
    get:
      summary: >- 
        Get the list of namespaces for that repository
      description: >-
        Lists the namespaces for the specified repository<br>
      parameters: [
        {
          name: "repository_name", 
          in: "path",
          description: "the repository to query",
          required: true,
          schema: {
            type: "string"
          }
        },
        {
          name: "prefix", 
          in: "query",
          description: "return items prefixed with this value",
          required: False,
          schema: {
            type: "string"
          }
        },
        {
          name: "after", 
          in: "query",
          description: "return items after this value - used for pagination",
          required: False,
          schema: {
            type: "string"
          }
        },
        {
          name: "amount", 
          in: "query",
          description: "number of items to return - used for pagination",
          required: False,
          schema: {
            type: "string",
            default: 100
          }
        }
        ]
      responses:
        '200':
          description: return list of namespaces
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  pagination:
                    type: object
                    properties: 
                      has_more:
                        type: boolean
                      next_offset: 
                        type: string
                      results: 
                        type: integer
                      max_per_page: 
                        type: integer
                  results: 
                    type: array
                    items: 
                      type: object
                      properties: 
                        id: 
                          type: string 
                        namespace: 
                          type: string
                        creation_date: 
                          type: string 
                          format: date-time
                          example: '1995-09-07T10:40:52Z'
                        default_ref: 
                          type: string
        '401': 
          description: Unauthorized User
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404': 
          description: repository not found 
        '420': 
          description: too many requests. 
        'default': 
          description: Internal server error
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string
    post: 
      summary: >-
        Create a new namespace 
      description: >-
        Create a new namespace for the specified repository. Source namespace should be specified.<br>
        The namespace could be composed of multiple hierarchies, such as '/foo/bar'. <br> 
        In that case, namespace should be referred to as '/refs/foo/refs/bar' when referring to the namespace in other API endpoints. 
        
      parameters: [
        {
          name: "repository_name", 
          in: "path",
          description: "the repository to create a new namespace in",
          required: true,
          schema: {
            type: "string"
          }
        }
        ]
      requestBody: 
        content:
          application/json:
            schema:
              type: object
              properties:
                new_namespace_name:
                  type: string
                  description: 'name for the new namespace'
                  example: 'namespace_name_new'
                source_ref:
                  type: string
                  description: 'source ref to create the new namespace from' 
                  example: 'source_ref (ref id, namespace name, repository name)'
      responses:
        '201':
          description: new namespace created 
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  id:
                    type: string
                  creation_date: 
                    type: string 
                    format: date-time
                    example: '1995-09-07T10:40:52Z'
                  items: 
                    type: object
                    properties: 
                      id: 
                        type: string 
                      creation_date: 
                        type: string 
                        format: date-time
                        example: '1995-09-07T10:40:52Z'
                      default_ref: 
                        type: string
        '400': 
          description: Validation Error
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401': 
          description: Unauthorized User
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404': 
          description: repository not found 
        '409': 
          description: Resource conflicts with existing namespace 
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string
        '420': 
          description: too many requests. 
        'default': 
          description: Internal server error
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string
  /repositories/{repository_name}/refs/{namespace_name}:
    get:
      summary: >- 
        get namespace
      description: >-
        get the current commit id for the namespace<br>
        The namespace could be composed of multiple hierarchies, such as '/foo/bar'. <br> 
        In that case, namespace should be referred to as '/refs/foo/refs/bar' when referring to the namespace in other API endpoints. 
      parameters: [
        {
          name: "repository_name", 
          in: "path",
          description: "the repository to query",
          required: true,
          schema: {
            type: "string"
          }
        },
        {
          name: "namespace_name", 
          in: "path",
          description: "the target namespace to query",
          required: true,
          schema: {
            type: "string"
          }
        }
        ]
      responses:
        '200':
          description: OK
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  id:
                    type: string 
                  name: 
                    type: string 
                    description: name of the namespace
                  creation_date:
                    type: string
                    format: date-time
                    example: '1995-09-07T10:40:52Z'
                  ref_id: 
                    type: string
                    description: most current ref id
        '401': 
          description: Unauthorized User
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404': 
          description: repository or namespace not found 
        '420': 
          description: too many requests. 
        'default': 
          description: Internal server error
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string
    delete: 
      summary: >- 
        Delete the specified namespace. 
      description: >-
        Delete the specified namespace. Must be only available to the authorized users. <br>
        The namespace could be composed of multiple hierarchies, such as '/foo/bar'. <br> 
        In that case, namespace should be referred to as '/refs/foo/refs/bar' when referring to the namespace in other API endpoints. 
      parameters: [
        {
          name: "repository_name", 
          in: "path",
          description: "the target repository to delete the namespace in",
          required: true,
          schema: {
            type: "string"
          }
        },
        {
          name: "namespace_name", 
          in: "path",
          description: "the target namespace to query",
          required: true,
          schema: {
            type: "string"
          }
        }
        ]
      responses: 
        '204':
          description: Requested namespace deleted. 
        '401': 
          description: Unauthorized User
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404': 
          description: repository or namespace not found 
        '420': 
          description: too many requests. 
        'default': 
          description: Internal server error
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string          

### Commits ### 
  /repositories/{repository_name}/refs/{namespace_name}/commits:
    get:
      summary: >- 
        Get the list of commits for the repository & namespace
      description: >-
        Get the list of the commit ids and their dates (deletion & addition of files) <br> 
        The namespace here could be composed of multiple hierarchies, such as '/foo/bar'. <br> 
        In that case, namespace should be referred to as '/refs/foo/refs/bar' when referring to the namespace in other API endpoints. <br>
      parameters: [
        {
          name: "repository_name", 
          in: "path",
          description: "the repository to query the commits for",
          required: true,
          schema: {
            type: "string"
          }
        },
        {
          name: "namespace_name", 
          in: "path",
          description: "the target ref to query the commits for",
          required: true,
          schema: {
            type: "string"
          }
        }
        ]
      responses:
        '200':
          description: return list of commits for the repository and namespace
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  pagination:
                    type: object
                    properties: 
                      has_more:
                        type: boolean
                      next_offset: 
                        type: string
                      results: 
                        type: integer
                      max_per_page: 
                        type: integer
                  results: 
                    type: array
                    items: 
                      type: object
                      properties: 
                        id: 
                          type: string 
                          description: commit id
                        commit_date: 
                          type: string 
                          format: date-time
                          example: '1995-09-07T10:40:52Z'
        '400': 
          description: No such repository or directory
        '401': 
          description: Unauthorized User
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404': 
          description: repository or namespace not found 
        '420': 
          description: too many requests. 
        'default': 
          description: Internal server error
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string

    post:
      summary: >- 
        Create a comit based on the current status of the repo metadata
      description: >-
        Get the list of the commit ids and their dates (deletion & addition of files) 
      parameters: [
        {
          name: "repository_name", 
          in: "path",
          description: "the repository to query the commits for",
          required: true,
          schema: {
            type: "string"
          }
        },
        {
          name: "namespace_name", 
          in: "path",
          description: "the target namespace to commit",
          required: true,
          schema: {
            type: "string"
          }
        }
        ]
      requestBody: 
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: 'this is the commit message'
                metadata:
                  type: object
                  example: 
                    {
                      "additional_prop_1": "string",
                      "additional_prop_2": "string",
                      "additional_prop_3": "string"
                    }
                commit_date:
                  type: string
                  format: date-time
                  example: '1995-09-07T10:40:52Z'
              
      responses:
        '200':
          description: OK
          content: 
            application/json: 
              schema: 
                type: object 
                properties: 
                  id: 
                    type: string 
                    description: the commit id 
                  parents: 
                    type: array
                    items: 
                      type: string 
                  committer: 
                    type: string 
                  message: 
                    type: string
                  creation_date: 
                    type: string
                    format: date-time
                    example: '1995-09-07T10:40:52Z'
                  metadata: 
                    type: object 
                    properties: 
                      additional_prop_1:
                        type: string 
                      additional_prop_2: 
                        type: string
                      additional_prop_3: 
                        type: string
        '400': 
          description: validation error
          content: 
            application/json: 
              schema: 
                type: object 
                properties: 
                  message: 
                    type: string 
        '401': 
          description: Unauthorized User
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404': 
          description: repository or namespace not found 
        '420': 
          description: too many requests. 
        'default': 
          description: Internal server error
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string          
  /repositories/{repository_name}/refs/{namespace_name}/refs/{commit_id}:
    get:
      summary: >- 
        Get the content of a commit for the given commit_id
      description: >-
        Get the list of changes for  the commit ids (deletion & addition of files)  <br> 
        The namespace could be composed of multiple hierarchies, such as '/foo/bar'. <br> 
        In that case, namespace should be referred to as '/refs/foo/refs/bar' when referring to the namespace in other API endpoints. <br>
      parameters: [
        {
          name: "repository_name", 
          in: "path",
          description: "the repository to query the commit for",
          required: true,
          schema: {
            type: "string"
          }
        },
        {
          name: "namespace_name", 
          in: "path",
          description: "the target namespace to query",
          required: true,
          schema: {
            type: "string"
          }
        },
        {
          name: "commit_id", 
          in: "path",
          description: "the commit id to query the history for",
          required: true,
          schema: {
            type: "string"
          }
        }
        ]
      responses:
        '200':
          description: OK
          content: 
            application/json: 
              schema: 
                type: object
                properties: 
                  id: 
                    type: string 
                  parents: 
                    type: array
                    items: 
                      type: string 
                  committer: 
                    type: string 
                  message: 
                    type: string 
                  creation_date: 
                    type: string
                    format: date-time 
                    example: '1995-09-07T10:40:52Z'
                  metadata: 
                    type: object
                    properties: 
                      additional_prop_1: 
                        type: string 
                      addtional_prop_2: 
                        type: string 
                      additional_prop_3: 
                        type: string
                  
        '401': 
          description: Unauthorized User
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404': 
          description: repository, namespace, or commit id not found 
        '420': 
          description: too many requests. 
        'default': 
          description: Internal server error
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string          
          

### Directory level operation ### 
  /repositories/{repository_name}/refs/{namespace_name}/{path_name}:
    get:
      summary: >- 
        Get the list of files or directories in that repository/ namespace 
      description: >-
        Get the list of files or directories in that repository/ namespace 
      parameters: [
        {
          name: "repository_name", 
          in: "path",
          description: "the repository to query",
          required: true,
          schema: {
            type: "string"
          }
        },
        {
          name: "namespace_name", 
          in: "path",
          description: "the target namespace to query",
          required: true,
          schema: {
            type: "string"
          }
        },
        {
          name: "path_name", 
          in: "path",
          description: "the path to query. Queries all the directories in the repository if not provided",
          required: True,
          schema: {
            type: "string"
          }
        },
        {
          name: "prefix", 
          in: "query",
          description: "return items prefixed with this value",
          required: False,
          schema: {
            type: "string"
          }
        },
        {
          name: "after", 
          in: "query",
          description: "return items after this value - used for pagination",
          required: False,
          schema: {
            type: "string"
          }
        },
        {
          name: "amount", 
          in: "query",
          description: "number of items to return - used for pagination",
          required: False,
          schema: {
            type: "string",
            default: 100
          }
        }
        ]
      responses:
        '200':
          description: return list of directories under that repository
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  pagination:
                    type: object
                    properties: 
                      has_more:
                        type: boolean
                      next_offset: 
                        type: string
                      results: 
                        type: integer
                      max_per_page: 
                        type: integer
                  results: 
                    type: array
                    items: 
                      type: object
                      properties: 
                        directory_name: 
                          type: string 
                        creation_date: 
                          type: string 
                          format: date-time
                          example: '1995-09-07T10:40:52Z'
        '401': 
          description: Unauthorized User
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404': 
          description: repository not found 
        '420': 
          description: too many requests. 
        'default': 
          description: Internal server error
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string

    delete: 
      summary: >- 
        Delete the provided directory or file. 
      description: >-
        Delete the path. directory or file could be composed of multiple hierarchies<br> 
        e.g. /foo/bar/file1
      parameters: [
        {
          name: "repository_name", 
          in: "path",
          description: "the target repository to delete the directory in",
          required: true,
          schema: {
            type: "string"
          }
        },
        {
          name: "namespace_name", 
          in: "path",
          description: "the target namespace to query",
          required: true,
          schema: {
            type: "string"
          }
        },
        {
          name: "path_name", 
          in: "path",
          description: "the path to delete. If a directory is provided, all items under the directory will be deleted",
          required: True,
          schema: {
            type: "string"
          }
        }
        ]
      responses: 
        '204':
          description: Requested path (directory or file) deleted. 
        '401': 
          description: Unauthorized User
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404': 
          description: repository/namespace/directory not found 
        '420': 
          description: too many requests. 
        'default': 
          description: Internal server error
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string          
  ### File-related ###
  /repositories/{repository_name}/refs/{ref}/objects:
    get:
      summary: >- 
        Get Object content
      description: >-
        Retrieve the content of the specified path as response
      parameters: [
        {
          name: "path", 
          in: "query",
          description: "the path of the file to query",
          required: true,
          schema: {
            type: "string"
          }
        },
        {
          name: "repository_name", 
          in: "path",
          description: "the target repository to query",
          required: True,
          schema: {
            type: "string"
          }
        },
        {
          name: "ref", 
          in: "path",
          description: "the target ref (commit id or a commit id in a ref) to query",
          required: true,
          schema: {
            type: "string"
          }
        }
        ]
      responses:
        '200':
          description: Object Content
          content: 
            application/octet-stream: 
              schema:
                type: object 
          headers:
            Content-Length:
              schema:
                type: integer
              description: Length of the content.
            Last-Modified:
              schema:
                type: string
                format: date-time 
                example: '1995-09-07T10:40:52Z'
        '401': 
          description: Unauthorized User
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404': 
          description: resource not found 
        '420': 
          description: too many requests. 
        'default': 
          description: Internal server error
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string
    post:
      summary: >- 
        Upload Object content
      description: >-
        Upload the file to the local repository. Requires Commit to upload it to the remote API. 
      parameters: [
        {
          name: "path", 
          in: "query",
          description: "the path of the file to upload",
          required: true,
          schema: {
            type: "string"
          }
        },
        {
          name: "repository_name", 
          in: "path",
          description: "the repository to upload to",
          required: True,
          schema: {
            type: "string"
          }
        },
        {
          name: "ref", 
          in: "path",
          description: "the target ref to upload to",
          required: true,
          schema: {
            type: "string"
          }
        }
        ]
      requestBody: 
        content:
          multipart/form-data:
            schema:
              type: object
              properties: 
                content:
                    type: string
                    format: binary
      responses:
        '201':
          description: Object metadata
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  path:
                    type: string 
                  path_type: 
                    type: string
                  physical_address:
                    type: string 
                  size_bytes: 
                    type: integer
                  checksum: 
                    type: string
                  metadata: 
                    type: object
                    properties: 
                      additional_prop_1: 
                        type: string
                      additional_prop_2: 
                        type: string
                      additional_prop_3: 
                        type: string
                  content-type: 
                    type: string
        '400': 
          description: validation error
          content:
            application/json: 
              schema: 
                type: object
                properties: 
                  message: 
                    type: string
        '401': 
          description: Unauthorized User
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404': 
          description: resource not found 
        '420':
          description: too many requests 
        'default': 
          description: Internal server error
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string    
  /repositories/{repository_name}/refs/{namespace_name}/objects:
    delete:
      summary: >- 
        Delete Object.
      description: >-
        Hide object from the local repository. Requires Commit to apply it to the remote<br>
        server. Deleted objects will be hidden in the manifest file. When queried, will return a NotFound error. 
      parameters: [
        {
          name: "path", 
          in: "query",
          description: "the path of the file to delete",
          required: true,
          schema: {
            type: "string"
          }
        },
        {
          name: "repository_name", 
          in: "path",
          description: "the repository to delete from",
          required: True,
          schema: {
            type: "string"
          }
        },
        {
          name: "namespace_name", 
          in: "path",
          description: "the target namespace to delete from",
          required: true,
          schema: {
            type: "string"
          }
        }
        ]
      responses:
        '204':
          description: Object deleted successfully
        '401': 
          description: Unauthorized User
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404': 
          description: resource not found
        '420': 
          description: Too many requests
        'default': 
          description: Internal server error
          content: 
            application/json: 
              schema:
                type: object
                properties:
                  message:
                    type: string    
  
  
  
  ### Auth ###  -> Using Hardcoded X-API-KEY for first iteration
  
  ### Others ### 
  
  /healthcheck:
    get:
      summary: check that the API server is up and running
      description: >-
        Heartbeat API to check that the API server is alive 
      security: []
      responses:
        '204':
          description: the server is alive with no response content. 
      
  ### User-related ### -> for the first stage of iteration, we will only have Administrators and normal users using X-API-KEY in the headers
          
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
        
    
## Saved for later iterations ## 
### Branch level operation ###  -> To be considered in later iteration, using namespace concept as of now
  # /repositories/{repository_name}/branches:
  #   get:
  #     summary: >- 
  #       Get the list of branches for that repository
  #     description: >-
  #       Lists the branches for the specified repository<br>
  #     parameters: [
  #       {
  #         name: "repository_name", 
  #         in: "path",
  #         description: "the repository to query",
  #         required: true,
  #         schema: {
  #           type: "string"
  #         }
  #       }
  #       ]
  #     responses:
  #       '200':
  #         description: OK
  #       '400': 
  #         description: No such repository or directory
  #   post: 
  #     summary: >-
  #       Create a new branch 
  #     description: >-
  #       Create a new branch for the specified repository. Source branch should be specified.
  #     parameters: [
  #       {
  #         name: "repository_name", 
  #         in: "path",
  #         description: "the repository to query",
  #         required: true,
  #         schema: {
  #           type: "string"
  #         }
  #       }
  #       ]
  #     requestBody: 
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               name:
  #                 type: string
  #                 example: 'branch_name_new'
  #               source:
  #                 type: string
  #                 example: 'parent_branch_name'
  #     responses:
  #       '200':
  #         description: OK
  #       '400': 
  #         description: No such repository or directory
  # /repositories/{repository_name}/branches/{branch_name}:
  #   get:
  #     summary: >- 
  #       get branch
  #     description: >-
  #       get the current commit id for the branch<br>
  #     parameters: [
  #       {
  #         name: "repository_name", 
  #         in: "path",
  #         description: "the repository to query",
  #         required: true,
  #         schema: {
  #           type: "string"
  #         }
  #       },
  #       {
  #         name: "branch_name", 
  #         in: "path",
  #         description: "the target branch to query",
  #         required: true,
  #         schema: {
  #           type: "string"
  #         }
  #       }
  #       ]
  #     responses:
  #       '200':
  #         description: OK
  #         content: 
  #           application/json: 
  #             schema:
  #               type: object
  #               properties:
  #                 id:
  #                   type: string 
  #                 commit_id: 
  #                   type: string
  #       '400': 
  #         description: No such repository or directory
  #   delete: 
  #     summary: >- 
  #       Delete the specified branch. 
  #     description: >-
  #       Delete the specified branch. Must be only available to the authorized users. 
  #     parameters: [
  #       {
  #         name: "repository_name", 
  #         in: "path",
  #         description: "the target repository to delete the branch in",
  #         required: true,
  #         schema: {
  #           type: "string"
  #         }
  #       },
  #       {
  #         name: "branch_name", 
  #         in: "path",
  #         description: "the target branch to delete",
  #         required: true,
  #         schema: {
  #           type: "string"
  #         }
  #       }
  #       ]
  #     responses: 
  #       '200':
  #         description: Requested branch deleted. 
  #       '400':
  #         description: No such branch. 
  # /repositories/{repository_name}/branches/{branch_name}/revert:  # To be saved for later Iteration
  #   post: 
  #     summary: >-
  #       Revert the branch to a certain commit
  #     description: >-
  #       Revert the branch to a certain commit or the parent commit
  #     parameters: [
  #       {
  #         name: "repository_name", 
  #         in: "path",
  #         description: "the repository where the target branch is in",
  #         required: true,
  #         schema: {
  #           type: "string"
  #         }
  #       },
  #       {
  #         name: "branch_name", 
  #         in: "path",
  #         description: "the target branch to revert",
  #         required: true,
  #         schema: {
  #           type: "string"
  #         }
  #       }
  #       ]
  #     requestBody: 
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               ref:
  #                 type: string
  #                 description: the commit_id, branch, and tag to revert to. If ommitted, the branch will be reverted to the most recent commit. 
  #                 example: 'branch_name_new'
  #     responses:
  #       '200':
  #         description: OK
  #       '400': 
  #         description: No such repository or directory
    # /repositories/{repository_name}/{branch_name}/refs/{source_ref}/diff/{target_ref}: # Saved for later iterations
  #   get:
  #     summary: >- 
  #       Get the diff of two branches or commits
  #     description: >-
  #       Get the diff of two branches or commits. source_ref and target_ref should be
  #       branch name or commit id. 
  #     parameters: [
  #       {
  #         name: "repository_name", 
  #         in: "path",
  #         description: "the repository to query the commit for",
  #         required: true,
  #         schema: {
  #           type: "string"
  #         }
  #       },
  #       {
  #         name: "branch_name", 
  #         in: "path",
  #         description: "the target branch to query",
  #         required: true,
  #         schema: {
  #           type: "string"
  #         }
  #       },
  #       {
  #         name: "source_ref", 
  #         in: "path",
  #         description: "the source commit id or branch to compare with",
  #         required: true,
  #         schema: {
  #           type: "string"
  #         }
  #       },
  #       {
  #         name: "target_ref", 
  #         in: "path",
  #         description: "the commit id or branch to compare with the source ref",
  #         required: true,
  #         schema: {
  #           type: "string"
  #         }
  #       }
  #       ]
  #     responses:
  #       '200':
  #         description: OK
  #       '400': 
  #         description: No such repository or directory  
  # /repositories/{repository_name}/{branch_name}/refs/{source_ref}/merge/{target_ref}: # Saved for later iterations
  #   post:
  #     summary: >- 
  #       Merge the diff of two branches or commits
  #     description: >-
  #       Merge two branches or commits. source_ref and target_ref should be
  #       branch name or commit id. 
  #     parameters: [
  #       {
  #         name: "repository_name", 
  #         in: "path",
  #         description: "the repository to query the commit for",
  #         required: true,
  #         schema: {
  #           type: "string"
  #         }
  #       },
  #       {
  #         name: "branch_name", 
  #         in: "path",
  #         description: "the target branch to query",
  #         required: true,
  #         schema: {
  #           type: "string"
  #         }
  #       },
  #       {
  #         name: "source_ref", 
  #         in: "path",
  #         description: "the source commit id or branch to merge",
  #         required: true,
  #         schema: {
  #           type: "string"
  #         }
  #       },
  #       {
  #         name: "target_ref", 
  #         in: "path",
  #         description: "the commit id or branch to merge",
  #         required: true,
  #         schema: {
  #           type: "string"
  #         }
  #       }
  #       ]
  #     responses:
  #       '200':
  #         description: OK
  #       '400': 
  #         description: No such repository or directory  
  
  
  ## meta_data commented out as the metadata should be queried using the croissant files by the users
  # /repositories/{repository_name}/{branch_name}/objects/meta_data:
  #   get: 
  #     summary: get the object metadata
  #     description: get the object metadata for the specified path
  #     parameters: [
  #       {
  #         name: "path", 
  #         in: "query",
  #         description: "the path of the file to upload",
  #         required: true,
  #         schema: {
  #           type: "string"
  #         }
  #       },
  #       {
  #         name: "repository_name", 
  #         in: "path",
  #         description: "the repository to query",
  #         required: True,
  #         schema: {
  #           type: "string"
  #         }
  #       },
  #       {
  #         name: "branch_name", 
  #         in: "path",
  #         description: "the target branch to uplaod to",
  #         required: true,
  #         schema: {
  #           type: "string"
  #         }
  #       }
  #     ]
  #     responses: 
  #       '200':
  #         description: Object metadata
  #         content: 
  #           application/json: 
  #             schema:
  #               type: object
  #               properties:
  #                 path:
  #                   type: string 
  #                 path_type: 
  #                   type: string
  #                 physical_address:
  #                   type: string 
  #                 size_bytes: 
  #                   type: integer
  #                 metadata: 
  #                   type: object
  #       '400':
  #         description: Object metadata
  #       '401':
  #         description: Unauthorized 
  #       '404':
  #         description: Resource Not Found 
  #       '420': 
  #         description: Too many requests
  ### File import-related ###  -> not considering this use case
  # /repositories/{repository_name}/{branch_name}/objects/import:
  #   get: 
  #     summary: import data from the object store 
  #     description: get the progress of the object import job
  #     parameters: [
  #       {
  #         name: "repository_name", 
  #         in: "path",
  #         description: "the repository to import the data to",
  #         required: True,
  #         schema: {
  #           type: "string"
  #         }
  #       },
  #       {
  #         name: "branch_name", 
  #         in: "path",
  #         description: "the target branch to uplaod to",
  #         required: true,
  #         schema: {
  #           type: "string"
  #         }
  #       }
  #     ]
  #     responses: 
  #       '200':
  #         description: Import Status
  #       '401':
  #         description: Unauthorized 
  #       '404': 
  #         description: Resource Not Found 
  #       '420': 
  #         description: Too Many Requests

